NAME : MANIPULATOR;

CONTRACT Coordinator:
    boolean variable grip;
    integer (0 : 3) variable command;
    boolean variable turn_executed;
    boolean variable place_executed;
    boolean variable pick_executed;
    boolean variable available;
    integer (0 : 3) variable angle;
    integer (0 : 3) variable desired_angle;

    proposition command_turn is command = 1;
    proposition command_pick is command = 2;
    proposition command_place is command = 3;
    proposition command_none is command = 0;
    proposition angle_desired is angle = desired_angle;

    Assumptions:
        []<>(available);
        []<>(turn_executed);
    Guarantees:
        [](command_pick & pick_executed -> grip);
        [](command_place & place_executed -> ~grip);
        [](~angle_desired & grip -> command_turn);

CONTRACT Turn:
    boolean variable grip;
    integer (0 : 3) variable command;
    boolean variable turn_executed;
    integer (0 : 3) variable angle;
    integer (0 : 3) variable next_angle;
    integer (0 : 3) variable desired_angle;
    boolean variable turning; 

    proposition command_turn is command = 1;
    proposition angle_lt_desired is angle < desired_angle;
    proposition angle_gt_desired is angle > desired_angle;
    proposition angle_eq_desired is angle = desired_angle;
    proposition angle_0 is angle = 0;
    proposition angle_90 is angle = 1;
    proposition angle_180 is angle = 2;
    proposition angle_270 is angle = 3;
    proposition command_none is command = 0;
    proposition angle_desired is angle = desired_angle;

    Assumptions:
        []<>(command_turn);

    Guarantees:
        []((turning & angle_lt_desired & angle_0) -> X(angle_90));
        []((turning & angle_lt_desired & angle_90) -> X(angle_180));
        []((turning & angle_lt_desired & angle_180) -> X(angle_270));
        []((turning & angle_gt_desired & angle_90) -> X(angle_0));
        []((turning & angle_gt_desired & angle_180) -> X(angle_90));
        []((turning & angle_gt_desired & angle_270) -> X(angle_180));
        []((turning & angle_eq_desired & angle_0) -> X(angle_0));
        []((turning & angle_eq_desired & angle_90) -> X(angle_90));
        []((turning & angle_eq_desired & angle_180) -> X(angle_180));
        []((turning & angle_eq_desired & angle_270) -> X(angle_270));
        []((angle_eq_desired) -> turn_executed);
