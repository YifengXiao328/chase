/**
 * @author      <a href="mailto:michele.lora@univr.it">Michele Lora</a>
 * @date        2015-2016
 * @copyright   Copyright (c) 2015-2017 by University of California, Berkeley.\n
 *              Copyright (c) 2015-2017 by University of Verona.\n
 *              Copyright (c) 2015-2017 by International Business Machines Corporation.\n
 *              Copyright (c) 2016-2017 by University of Southern California.\n
 *              All rights reserved.\n
 *              This project is released under the 3-Clause BSD License.
 *
 * @file	chase/include/Architecture/EPS/EPSTopology.hh
 * @brief
 */



#ifndef EPS_TOPOLOGY_HH
#define EPS_TOPOLOGY_HH


/// @brief This file is the header for the Topology representation for
/// a  Electrical Power System (EPS). The architecture is generated by
/// another tool for ARCHitectural EXploration, called ArchEx. Its output
/// is a file containing information parsed by the methods declared here.
// The file format is described hereby:
//
// General Structure:
// the file is divided in the following parts.
// 
// - Components Declarations:
// this section provides to declare the number of components for every
// type available (the types of components are defined in the EPSDefinitions.hh
// header, by the enumeration "componentType"). The section begin with the
// keyword [COMPONENTS] and then it contains a list the declaration in the form:
// type : number
// where the type belong to the following set:
// T = {left_generator, right_generator, auxiliary_generator,
//      left_ac, right_ac,
//      left_rectifier, right_rectifier,
//      left_dc, right_dc}
//
// And number is a integer, positive number.
//
// - Matrix declaration:
// The topology resulting by ArchEx is represented by the
// adjacency matrix of the obtained graph.
// The components are ordered as defined by the defintion of the set
// type T (considering the multiplicity of each type). The matrix
// reports only the connections, not its type (uni-, bi-directiona, or
// direct and undirect), since the connection types is implicitly 
// given by the connected types. This section is identified by the keyword
// [MATRIX] followed by the matrix representation as 0 and 1. The matrix is
// space unsensitive.
//
// - Direct connections specification:
// This section is used to specify which connections, among which types,
// are direct (i.e., without contactors). The section starts with the
// keyword [DIRECT CONNECTIONS] and is followed by a list of statements
// of the form:
// type1 -> type2
// indicating that any connection having a node of type1 as source and a
// node of type2 as target is direct.
//
/// \todo DEFINE BETTER THE TYPES SYNTAX!!!!
//

#include "EPS/EPSDefinitions.hh"
#include "Behaviors/Logics/Logics.hh"
#include "Behaviors/Variable.hh"
#include "Contracts/Contracts.hh"

#include "Utilities/Utilities.hh"

#include <list>
#include <map>
#include <fstream>
#include <string>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <algorithm>

#include "Utilities/Portability/Portability.hh"

namespace chase { namespace epstool {
    namespace EPS
    {
        /// \brief Class to represent a Topology for an EPS system,
        // as generated by the ArchEx tool. A topology can be seen
        // as a Graph, where the nodes are components (EPSComponent)
        // and the edges can be direct connections or connections
        // with contactors. Contactors can be uni- or bi-directional.
        class EPSTopology
        {
            public:

                /// @brief List of the components USED in the topology.
                /// The components are a subset of the template given as
                /// input to ArchEx, and it is composed by the components
                /// actually used.
                std::vector< EPSComponent * > components;

                /// @brief List of the contactors inserted in the edges.
                /// Edges without any contactor are to be considered direct
                /// connections.
                std::vector< Contactor * > contactors;

                /// @brief Constructor for the class.
                /// @param spec Path to the file generated by ArchEx and
                /// containing the representation of the architecture, as
                /// well as information concerning direct or contactor-based
                /// connections among components-types.
                /// Above, the definition of the file format is reported.
                /// @param phys specifies if the contactors are physically
                /// accurate (flag set to true) or ideal (flag set to false).
                EPSTopology( std::string spec, bool phys );

                /// @brief Destructor.
                ~EPSTopology();

                /// @brief return the adjacency matrix of the topology.
                /// @return pointer to the adjacency matrix.
                int ** getMatrix();

                /// @brief Function retrieving the transpose matrix of the
                /// adjacency matrix of the topology.
                /// @return A pointer to the transpose matrix.
                int ** getInverseMatrix();

                /// @brief accessor to the size of the topology, that is the 
                /// number of components.
                /// @return number of components in the EPS.
                int getSize();

                Contracts::AGContract * buildContractFromTopology();

                Contactor * getContactorBetweenNodes(int i, int j); 


            protected:
                // The contactors are on the matrix, 
                // and the name is an integer > 1
                int ** _adj_matrix;

                // Number of components per type in the topology.
                unsigned int _n_per_type[COMPONENT_TYPE_SIZE];

                // Total number of components, i.e., size of the topology
                int _n_components;

                // Flag true iff the contactors employed are physically accurate.
                bool _physical_contactors;

                //----- SUPPORT METHODS

                /// @brief Main method for parsing the file. 
                /// @param spec Path to the input file generated by ArchEx.
                void _parseFile( std::string spec );

                /// @brief Method parsing the components declaration section.
                /// it provides to create the list of components.
                /// @param components List of string, where every entry is a line
                /// of the component declaration section of the input file.
                /// return The number of coponents declared. 
                int _createComponents( std::list< std::string > * components );

                /// @brief Support method, that create given a type t 
                /// and number n creates n components of type t and inserts them
                /// into the list of components of the topology.
                /// @param c String representing the type of the component (as in
                /// file specification).
                /// @param n number of components to create.
                /// @return number of components inserted.
                int _declareComponent(std::string c, unsigned int n);

                /// @brief Method to parse the matrix in the input file.
                /// @param matrix Adjacency Matrix declared in the input 
                /// file, represented as a list of string.
                /// return Number of edges in the Topology Graph.
                int _createMatrix( std::list< std::string > * matrix );

                /// @brief Method that gathering the information given by the
                /// file, create the contactors for the un-direct connections.
                /// @param direct_connections Direct Connections section of the
                /// input file, as a list of strings, where every string is a line
                /// from the file.
                /// @return The number of contactors created.
                int _createContactors( 
                        std::list< std::string > * direct_connections );

                /// @brief Support method to create a list of couples of 
                /// components types that are directly connected.
                /// @param s List of string, where every line is a line of the
                /// file from the Direct Connections section of an ArchEx output
                /// file.
                /// @return A Multimap where every entry is a couple of compnenent
                /// types that are directly connected.
                std::multimap< componentType, componentType > * 
                    _createDirectConnectionsMap( std::list< std::string > * s );

                /// @brief Support method checking if 
                /// the connection (and the eventual contactaor) has already been
                /// declared, being bi-directional. If so, it returns the number
                /// of the contactor that has been already been declared.
                /// @param i Source node index of the connection.
                /// @param j Target node index of the connection.
                /// @return -1 if no Contactor from j to i has already been
                /// defined. Otherwise, it returns the number of the contactor
                /// used to connect j to i.
                int _checkBidirectionalContactors(int i, int j);


        };
    }
}}


#endif // EPS_TOPOLOGY_HH
